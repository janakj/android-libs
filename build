#!/usr/bin/env bash

print_doc () {
    echo \
"Build an autotools-based library as native library for Android.

SYNOPSIS
  $(basename $0)

OPTIONS
  -h  Print this help text and exit.

DESCRIPTION
  Cross-compile a shared library with a configuration system based on
  autotools for Android. The resulting library should be suitable for
  inclusion into an Android application as a native library. The script needs
  to have access to Android NDK.

  The script first downloads the source tarball for the given library, unpacks
  the sources into a temporary directory and then runs configure, make all,
  and make install. Several environment variables are overriden before
  configure is called to make sure that the configure script knows that we're
  cross-compiling.

  Because the linker on Android doesn't support versioned libraries created by
  libtool by default, we need to modify the resulting binary and remove the
  ABI version suffix from its SONAME. This is an ungly hack, but hopefully a
  future version of Android NDK will handle pre-built shared libraries better.

  The script also installs libraries and header files into a common directory
  under toolchain/sysroot. This is useful when one library depends on another.

  To use pre-built libraries in your Android project, set the environment
  variable NDK_MODULE_PATH to point to the top-level directory of android-libs
  and then you can import individual packages with import-module, for example:

    $(call import-module, curl/7.28.0)

  Note: Each module may also import other modules internally and in that case
  multiple .so libraries will be installed in your Android project. Since the
  Android linker won't be able to find shared libraries that other libraries
  depend upon, you may need to load them manually before loading the
  corresponding library, for example:

    System.loadLibrary(\"cares\");
    System.loadLibrary(\"curl\");

RETURN VALUE
  The script returns 0 on success and a non-zero value if it failed to build
  the library.

ENVIRONMENT VARIABLES
  You can customize the build by setting the following environment variables:

  NAME       The name of the library being built
  VERSION    Library version
  TARBALL    Source tarball name [$NAME-$VERSION.tar.gz]
  URL        The URL to download the source tarball from (optional)
  TOOLCHAIN  Target Android architecture [arm-linux-androideabi-4.6]
  PLATFORM   Target Android platform [android-3]
  DEPENDS    A list of modules a library depends on. Each dependency is a
             triplet name/version/module.

AUTHORS
  Jan Janak <jan@janakj.org>
"
}

bail () {
    echo "ERROR: $@" >&2
    exit 1
}

# Make a standalone version of cross-compiler tools from Android NDK and
# install them into the directory specified in $1. Add the correct
# subdirectory with executable tools to PATH. Override the environment
# variable CC with the correct compiler for cross-compilation. Set the
# variable $prefix to a string suitable for the --host command line option of
# configure.
make_tools () {
    # Provide a default toolchain name if the caller didn't specify any
    TOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}

    # Detect Android SDK and NDK and make sure all directories and tools are
    # there.
    android_sdk=$(which android | sed -Ee 's@(.*)/tools/android@\1@')
    [ -z "$android_sdk" ] && bail "Android SDK not found"

    # If you install NDK from the android manager tool, it will be located in
    # the ndk subdirectory of Android SDK.
    android_ndk="$android_sdk/ndk"
    [ -d "$android_ndk" ] || bail "Android NDK not found"

    # Extract CPU type from the toolchain name.
    arch=$(echo "$TOOLCHAIN" | cut -d - -f 1)
    prefix=$(echo "$TOOLCHAIN" | sed -Ee 's/^(.*)-[^-]+$/\1/')

    opts="--arch=$arch"
    [ -n "$TOOLCHAIN" ] && opts+=" --toolchain=$TOOLCHAIN"
    [ -n "$PLATFORM" ] && opts+=" --platform=$PLATFORM"

    [ -d "$1" ] || {
	script="$android_ndk/build/tools/make-standalone-toolchain.sh"
	$script $opts --install-dir="$1"
	[ $? -ne 0 ] && {
	    bail "Script failed: $script $opts --install-dir=\"$1\""
	}
    }

    export PATH="$1/bin:$PATH"
    export CC=$prefix-gcc
}

# Find all versioned shared libraries installed into $1. Return the list of
# libraries found in $libs and return a list of those in $libs.
find_versioned_libs () {
    # Find all shared libraries
    libs=$(cd $1; find "usr/lib" -type f -name "*.so.*" -print || true)
}

# Find unversioned shared libraries (regular files ending with .so). Returns a
# list in $so_libs.
find_so_libs () {
    so_libs=$(cd $1; find "usr/lib" -type f -name "*.so" -print || true)
}

# Find static libraries (regular files ending with .a). Returns a list in
# $a_libs.
find_a_libs () {
    a_libs=$(cd $1; find "usr/lib" -type f -name "*.a" -print || true)
}

# HACK: Remove the version suffix from the SONAME string in given
# libraries. Argument $1 is the target directory, the remaining arguments are
# relative pathnames (wrt the target directory) of libraries to work with. The
# function removes the file ending with .so if it exists (it's usually a
# symbolic link) and stores the modified version of the library (with the
# version suffix removed from the SONAME) under that name.
#
# This hack is necessary because the APK builder tool only installs shared
# libraries whose filenames end with .so. The Android linker would not be able
# to link the library if the SONAME string in the library's filename doesn't
# match the SONAME string. An alternative would be to install the versioned
# library into the APK package manually.
fix_soname () {
    dir="$1"
    shift
    (cd $dir
    for l in $@ ; do
	dir="$(dirname $l)"
	old=$($prefix-objdump $l -p | grep SONAME | sed -Ee \
	    's/^[ \t]*SONAME[ \t]+(.*)$/\1/')
	[ -z "$old" ] && bail "Can't find SONAME for $dir/$l"

	new=$(echo $old | sed -Ee 's/(^.+\.so)(\.[0-9]+)+/\1/')
	padding=$(echo $old | sed -Ee 's/^.+\.so(\.[0-9]+)+$/\1/' | sed -Ee \
	    's/./\\000/g')

	rm -f "$dir/$new" >/dev/null 2>&1
	cp "$l" "$dir/$new" >/dev/null 2>&1
	perl -pi -e "s/$old/$new$padding/" "$dir/$new" >/dev/null 2>&1
    done)
}

# Start a new Android.mk file in directory $1.
open_android_mk () {
    dir="$1"
    cat >"$dir/Android.mk" <<EOF
# Automatically generated file, do not edit!
LOCAL_PATH := \$(call my-dir)

EOF
}

# Add a new prebuild shared library section to the Android.mk file in $1. The
# rest of the arguments are library files (.so) to be added as source
# files. The name of the module will be derived from the first library name on
# the list.
add_prebuild_shared () {
    dir="$1"; shift
    mk="$dir/Android.mk"
    module=$(echo $(basename $1) | sed -Ee 's/^(.*)\.so$/\1/')

    cat >>"$mk" <<EOF
include \$(CLEAR_VARS)
LOCAL_MODULE := $module
LOCAL_SRC_FILES := $@
EOF

    # Export header files if we have them
    [ -d "$dir/usr/include" ] && {
	echo "LOCAL_EXPORT_C_INCLUDES := \$(LOCAL_PATH)/usr/include" >>"$mk"
    }

    [ -n "$DEPENDS" ] && {
	echo -n "LOCAL_SHARED_LIBRARIES :=" >>"$mk"
	for d in $DEPENDS ; do
	    echo -n " $(echo $d | cut -d / -f 3)" >>"$mk"
	done
	echo "" >>"$mk"
    }

    echo "include \$(PREBUILT_SHARED_LIBRARY)" >>"$mk"
    echo "" >>"$mk"
}

# Add a new prebuild static library section to the Android.mk file in $1. The
# rest of the argument list are library files (.a) to be added as source
# files. The name of the module will be derived from the first library name on
# the list.
add_prebuild_static () {
    dir="$1"; shift
    mk="$dir/Android.mk"
    module=$(echo $(basename $1) | sed -Ee  's/^(.*)\.a$/\1/')

    cat >>"$mk" <<EOF
include \$(CLEAR_VARS)
LOCAL_MODULE := ${module}_static
LOCAL_SRC_FILES := $@
EOF

    # Export header files if we have them
    [ -d "$dir/usr/include" ] && {
	echo "LOCAL_EXPORT_C_INCLUDES := \$(LOCAL_PATH)/usr/include" >>"$mk"
    }

    [ -n "$DEPENDS" ] && {
	echo -n "LOCAL_SHARED_LIBRARIES :=" >>"$mk"
	for d in $DEPENDS ; do
	    echo -n " $(echo $d | cut -d / -f 3)" >>"$mk"
	done
	echo "" >>"$mk"
    }

    echo "include \$(PREBUILT_STATIC_LIBRARY)" >>"$mk"
    echo "" >>"$mk"
}

close_android_mk () {
    dir="$1"
    for d in $DEPENDS ; do
	inc=$(echo $d | cut -d / -f 1-2)
	echo "\$(call import-module, $inc)" >>"$dir/Android.mk"
    done
}

# If we have patches, copy them over to $1 and apply all of them using
# quilt. The function needs to be run from the directory containing the
# "patches" subdirectory.
apply_patches () {
    [ -d "patches" ] || return 0
    cp -a patches "$1"
    (cd "$1"; quilt push -a)
    [ $? -ne 0 ] && bail "Error while applying patches."
}

# Run the autoreconf script.
declare -f run_autoreconf >/dev/null || run_autoreconf () {
    [ -x "$(which libtoolize)" ] || {
        # A hack for Mac OS X. Libtool installed from Mac ports installs
        # libtoolize as glibtoolize.
	[ -x "$(which glibtoolize)" ] || bail "Cannot find libtoolize."
	glibtoolize
    }
    # Otherwise the script runs libtoolize internally.
    autoreconf
}

# Run the configure script. Cross-compile for the target architecture in $1
# and configure libraries and header file to be installed under /usr. Gets the
# absolute name of the destination directory to install into in $2.
declare -f run_configure >/dev/null || run_configure () {
    run_autoreconf
    ./configure --host=$1 --prefix=/usr
}

# Build all the libraries. Gets the absolute name of the destination directory
# to install into in $1.
declare -f run_build >/dev/null || run_build () {
    make all
}

# Install library files and header files. NOTE: The build system MUST install
# all the files under $1!
declare -f run_install >/dev/null || run_install () {
    DESTDIR="$1" make install
}

[ $# -gt 0 ] && {
    print_doc
    exit 0
}

[ -z "$root" ] && bail "Variable \$root not set by calling script."

# Make sure we have all the tools this script needs.
for t in wget quilt perl make autoreconf mktemp android sed sort tail ls \
    find mkdir cp ; do
    [ -x "$(which $t)" ] || bail "Couldn't execute $t command."
done

# The default tarball naming pattern to use if the caller didn't provide a
# different source tarball name.
TARBALL=${TARBALL:-$NAME-$VERSION.tar.gz}

cd $(dirname $0)
root="$(pwd)/$root"
sysroot="$root/toolchain/sysroot"

# Download the source tarball if we don't have it yet.
[ -r "$TARBALL" ] || {
    [ -z "$URL" ] && {
        bail "No tarball found and no download URL provided"
    }
    wget "$URL"
    [ $? -ne 0 ] && bail "Can't download source tarball from $URL"
}

# Create a temporary directory
tmp="$(mktemp -d /tmp/build-$NAME-$VERSION-XXXXXX)"
trap 'rm -rf "$tmp"' EXIT

make_tools "$root/toolchain"
tar -C "$tmp" -xvf "$TARBALL"
apply_patches $tmp

# Prepare the destination directory for install. We name the environment
# variable DESTDIR because that's the name picked up by Makefile generated by
# automake and autoconf.
export DESTDIR="$(pwd)/$VERSION"
[ -d "$DESTDIR" ] && rm -rf "$DESTDIR"
mkdir -p "$DESTDIR"

export PKG_CONFIG_SYSROOT_DIR="$sysroot"
export PKG_CONFIG_LIBDIR="$PKG_CONFIG_SYSROOT_DIR/usr/lib/pkgconfig/"

export HOST="$prefix"

(set -e
 cd $tmp/${NAME}-${VERSION};
 run_configure $prefix "$DESTDIR"
 run_build "$DESTDIR"
 run_install "$DESTDIR"
 run_install "$sysroot"
)
[ $? -ne 0 ] && bail "Error while building the library."

# Find any libraries that have version appended to their SONAME
find_versioned_libs "$DESTDIR"
[ -n "$libs" ] && {
    # And fix the SONAME in those libraries in both $DESTDIR and in
    # $sysroot. fix_soname will also rename the library files to end with .so
    # (to match the SONAME).
    fix_soname "$DESTDIR" $libs
    fix_soname "$sysroot" $libs
}

# Now find all the shared and static libraries. The list of shared libraries
# goes to $so_libs, the list of static libraries goes to $a_libs.
find_so_libs "$DESTDIR"
find_a_libs  "$DESTDIR"

# Create Android.mk
open_android_mk "$DESTDIR"
for l in $so_libs ; do add_prebuild_shared "$DESTDIR" $l; done
for l in $a_libs  ; do add_prebuild_static "$DESTDIR" $l; done
close_android_mk "$DESTDIR"

exit 0
